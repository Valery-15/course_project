@using Microsoft.AspNetCore.Identity
@using CollectionsApp.Models
@using Microsoft.AspNetCore.Mvc;
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager


@{
    bool isUserSignedIn = signInManager.IsSignedIn(this.User);
    bool isCurrentUserActive = this.User.IsInRole("active user");
    string currentUserId = userManager.GetUserId(this.User);
    bool isCurrentUserCollectionsOwner = ViewBag.collectionsOwnerId.Equals(currentUserId);
    bool isCurrentUserAdmin = this.User.IsInRole("admin");
    bool isCurrentUserHasRightToMakeChanges = isUserSignedIn & isCurrentUserActive & (isCurrentUserAdmin | isCurrentUserCollectionsOwner);
    IdentityUser collectionsOwner = await userManager.FindByIdAsync(ViewBag.collectionsOwnerId);
    string collectionsOwnerName = collectionsOwner.UserName;
    string heading = isCurrentUserCollectionsOwner ? "My collections" : (collectionsOwnerName + "'s  collections");
}


<div>
    <nav class="navbar">
        <form class="form-inline">
            <h1>@heading</h1>
        </form>
        @if (isCurrentUserHasRightToMakeChanges)
        {
            <form class="form-inline">
                <a asp-controller="Collections" asp-action="CreateCollection" asp-route-collectionsOwnerId="@ViewBag.collectionsOwnerId" class="btn btn-outline-success">
                    <i class="bi bi-plus-circle"></i>
                </a>
            </form>
        }
            
    </nav>

    <table class="table table-striped table-bordered" id="collectionsTable">
        <thead class="thead-dark">
            <tr>
                <th>Title</th>
                <th>Theme</th>
                <th>Description</th>
                <th>Size</th>
                @if (isCurrentUserHasRightToMakeChanges)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script>
    var collectionsOwnerId = '@ViewBag.collectionsOwnerId';
    var isCurrentUserHasRightToMakeChanges = '@isCurrentUserHasRightToMakeChanges'.toLowerCase() == 'true';

    var collectionsTable = document.getElementById('collectionsTable');

    updateCollectionsList();

    function updateCollectionsList() {
        var url = '/Collections/GetCollectionsList?userId=' + collectionsOwnerId;
        fetch(url)
            .then(result => result.json())
            .then(data => {
                if (data.length == 0) {
                    clearTable(collectionsTable, 0);
                } else {
                    clearTable(collectionsTable, 1);

                    data.forEach(collection => {
                        var tr = document.createElement('tr');

                        createTdWithA(tr, collection.title, "/Items/ItemsList?collectionId=" + collection.id);
                        createTd(tr, collection.theme);
                        createTd(tr, collection.description);
                        createTd(tr, collection.size);

                        if (isCurrentUserHasRightToMakeChanges) {
                            var td = document.createElement('td');
                            createAWithIcon(td, "bi bi-pencil", "btn btn-outline-success",
                                "/Collections/EditCollection?collectionId=" + collection.id);
                            createAWithIcon(td, "bi bi-trash", "btn btn-outline-danger",
                                "/Collections/DeleteCollection?collectionId=" + collection.id);
                            tr.appendChild(td);
                        }

                        collectionsTable.append(tr);
                    });
                }
                setTimeout(updateCollectionsList, 5000);
            })
            .catch(e => {
                setTimeout(updateCollectionsList, 5000);
            });
    }

    function createTdWithA(tr, text, href) {
        td = document.createElement('td');
        var a = document.createElement('a');
        var linkText = document.createTextNode(text);
        a.appendChild(linkText);
        a.href = href;
        td.appendChild(a);
        tr.appendChild(td);
    }

    function createTd(tr, text) {
        td = document.createElement('td');
        td.innerHTML = text;
        tr.appendChild(td);
    }

    function createAWithIcon(td, iconClassName, aClassName, aHref) {
        a = document.createElement('a');
        var i = document.createElement('i');
        i.className = iconClassName;
        a.appendChild(i);
        a.className = aClassName;
        a.href = aHref;
        td.appendChild(a);
    }

    function clearTable(table, offset = 0) {
        let rowCount = table.rows.length;
        for (var i = offset; i < rowCount; i++) {
            table.deleteRow(offset);
        }
    }
</script>
