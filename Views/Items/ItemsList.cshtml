@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@{
    bool isUserSignedIn = signInManager.IsSignedIn(this.User);
    bool isCurrentUserAdmin = this.User.IsInRole("admin");
    bool isCurrentUserCollectionOwner = ViewBag.collection.User.Id.Equals(userManager.GetUserId(this.User));
    bool isCurrentUserActive = this.User.IsInRole("active user");
    bool isCurrentUserHasRightToMakeChanges = isUserSignedIn & isCurrentUserActive & (isCurrentUserAdmin | isCurrentUserCollectionOwner);
    string collectionOwner = isCurrentUserCollectionOwner ? "You" : ViewBag.collection.User.UserName;
    string collectionImageSrc = "https://drive.google.com/uc?export=view&id=" + ViewBag.collection.ImageUrl;
}

<div>
    <nav class="navbar">
        <form>
            <h1 class="h2 text-info">Collection: @ViewBag.collection.Title</h1>
            <label>
                Theme: @ViewBag.collection.Theme<br />
                Owner: <a href="/Collections/CollectionsList?collectionsOwnerId=@ViewBag.collection.UserId">@collectionOwner</a>
            </label>
        </form>
        @if (isCurrentUserHasRightToMakeChanges)
        {
            <form class="form-inline">
                <a asp-controller="Items" asp-action="CreateItem" asp-route-collectionId="@ViewBag.collection.Id" class="btn btn-outline-success">
                    <i class="bi bi-plus-circle"></i>
                </a>
            </form>
        }

        @if (ViewBag.collection.ImageUrl != null)
        {
            <form>
                <img src="@collectionImageSrc" style="width:200px; height: 150px;border-radius: 5px" />
            </form>
        }

    </nav>

    <table class="table table-bordered" id="itemsTable">
        <thead class="thead-dark">
            <tr>
                <th>Item</th>
                <th>Tags</th>
                @if (isCurrentUserHasRightToMakeChanges)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script>
    var collectionId = '@ViewBag.collection.Id';
    var isCurrentUserHasRightToMakeChanges = '@isCurrentUserHasRightToMakeChanges'.toLowerCase() == 'true';

    var itemsTable = document.getElementById('itemsTable');

    updateItemsList();

    function updateItemsList() {
        var url = '/Items/GetItemsList?collectionId=' + collectionId;
        fetch(url)
            .then(res => res.json())
            .then(data => {
                if (data.length == 0) {
                    clearTable(itemsTable, 0);
                } else {
                    clearTable(itemsTable, 1);

                    data.forEach((item) => {
                        var tr = document.createElement('tr');

                        createTdWithA(tr, item.title, "/Items/Item?itemId=" + item.id);

                        var td = document.createElement('td');
                        var tags = JSON.parse(item.jsonTags);
                        tags.forEach(tag => {
                            a = document.createElement('a');
                            linkText = document.createTextNode("#" + tag.TagValue + " ");
                            a.appendChild(linkText);
                            a.href = "/Tags/GetItemsByTag?tagId=" + tag.Id;
                            td.appendChild(a);
                        });
                        tr.appendChild(td);

                        if (isCurrentUserHasRightToMakeChanges) {
                            td = document.createElement('td');
                            createAWithIcon(td, "bi bi-pencil", "btn btn-outline-success", "/Items/EditItem?itemId=" + item.id);
                            createAWithIcon(td, "bi bi-trash", "btn btn-outline-danger", "/Items/DeleteItem?itemId=" + item.id);
                            tr.appendChild(td);
                        }

                        itemsTable.append(tr);
                    });
                }

                setTimeout(updateItemsList, 5000);
            })
            .catch(e => {
                setTimeout(updateItemsList, 5000);
            });
    }

    function createTdWithA(tr, text, href) {
        td = document.createElement('td');
        var a = document.createElement('a');
        var linkText = document.createTextNode(text);
        a.appendChild(linkText);
        a.href = href;
        td.appendChild(a);
        tr.appendChild(td);
    }

    function createAWithIcon(td, iconClassName, aClassName, aHref) {
        a = document.createElement('a');
        var i = document.createElement('i');
        i.className = iconClassName;
        a.appendChild(i);
        a.className = aClassName;
        a.href = aHref;
        td.appendChild(a);
    }

    function clearTable(table, offset = 0) {
        let rowCount = table.rows.length;
        for (var i = offset; i < rowCount; i++) {
            table.deleteRow(offset);
        }
    }
</script>

