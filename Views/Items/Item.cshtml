@model CollectionsApp.ViewModels.ItemViewModel

@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{ 
    bool isCurrentUserSignedIn = SignInManager.IsSignedIn(this.User);
    bool isCurrentUserActive  = this.User.IsInRole("active user");
    bool isCurrentUserAdmin = this.User.IsInRole("admin");
    bool isCurrentUserCollectionOwner = Model.CollectionOwnerId.Equals(UserManager.GetUserId(this.User));
    bool isCurrentUserHasRightToMakeChanges = isCurrentUserActive & isCurrentUserSignedIn & (isCurrentUserAdmin | isCurrentUserCollectionOwner);
}

<div>
    <div>
        <a class="h2 text-primary" href="/Items/ItemsList?collectionId=@Model.CollectionId">
            @Model.CollectionTitle
        </a><br/><br />
    </div>

    <div class="card" style="width: 18rem;">
        <div class="card-header">
            <h2 class="h3 text-info">@Model.Title</h2>
            @if (Model.Tags.Count() != 0)
            {
                foreach (var tag in Model.Tags)
                {
                    <a asp-action="GetItemsByTag" asp-controller="Tags" asp-route-tagId="@tag.Id">
                        #@tag.TagValue
                    </a><br />
                }
            }
        </div>

        <ul class="list-group">

                @if (isCurrentUserHasRightToMakeChanges)
                {
                    <li class="list-group-item">
                        <a href="/Items/EditItem?itemId=@Model.ItemId" class="btn btn-outline-success">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <a href="/Items/DeleteItem?itemId=@Model.ItemId" class="btn btn-outline-danger">
                            <i class="bi bi-trash"></i>
                        </a>
                    </li>
                 }
                
                @foreach (var field in Model.AdditionalFields)
                {
                    if (field.InputType.ToLower().Equals("checkbox"))
                    {
                        if (field.Value == null)
                        {
                            <li class="list-group-item">@field.Title: no</li>
                        }
                        else
                        {
                            <li class="list-group-item">@field.Title: yes</li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item">@field.Title: @field.Value</li>

                    }
                }
                <li class="list-group-item align-content-end">
                    <button id="like" style="border:none; background:none;outline:none;color:deeppink"></button>
                    <label id="likesNumber"></label>
                </li>
            </ul>
    </div><br />


    @if (isCurrentUserSignedIn & isCurrentUserActive)
    {
        <div>
            <form method="post" asp-controller="Comments" asp-action="AddComment">
                <input type="hidden" name="itemId" value="@Model.ItemId" />
                <textarea name="body" style="width: 18rem" placeholder="Your comment" required></textarea><br/>
                <input type="submit" class="btn btn-primary" value="Send" />
            </form>
        </div><br />
    }

    
    <div class="card" style="width: 18rem;">
        <div class="card-header">
            <label class="h3 text-dark" style="font-weight:500">Comments</label>
        </div>
        <div class="card-body">
            <table id="comments">
                <thead>
                    <tr>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    var comments = document.getElementById('comments');

    updateComments();

    function updateComments() {
        var url = '/Comments/GetCommentsList?itemId=@Model.ItemId';
        fetch(url)
            .then(result => result.json())
            .then(commentsList => {
                clearTable(comments, 1);

                commentsList.forEach(comment => {
                    var tr = document.createElement('tr');
                    var td;

                    td = document.createElement('td');
                    td.innerHTML = comment.user.userName + ':  ';
                    td.style = "font-weight:500";
                    tr.appendChild(td);

                    td = document.createElement('td');
                    td.innerHTML = comment.body;
                    tr.appendChild(td);

                    comments.append(tr);
                });
                setTimeout(updateComments, 5000);
            })
            .catch(e => {
                setTimeout(updateComments, 5000);
            });
    }

    function clearTable(table, offset = 0) {
        if (table.rows != null) {
            let rowCount = table.rows.length;
            for (var i = offset; i < rowCount; i++) {
                table.deleteRow(offset);
            }
        }
    }
</script>

<script>
    var like = document.getElementById('like');
    var likesNumber = document.getElementById('likesNumber');
    var isSignedIn = '@SignInManager.IsSignedIn(this.User)';
    var isUserLikedItem;
    var url;

    updateLikes();

    function updateLikes() {
        fetch('/Likes/ShowLikes?itemId=@Model.ItemId')
            .then(result => result.json())
            .then(data => {
                func(data);
            });
        setTimeout(updateLikes, 5000);
    }

    if (isSignedIn.toLowerCase() == "true") {
        like.addEventListener("click", function () {
            fetch(url)
                .then(response => response.json())
                .then((data) => {
                    func(data);
                    });
        });
    }

    function userAddedLikeToItem() {
        isUserLikedItem = true;
        url = '/Likes/RemoveLike?itemId=@Model.ItemId';
        like.className = "bi bi-heart-fill";
    }

    function userRemovedLikeFromItem() {
        isUserLikedItem = false;
        url = '/Likes/AddLike?itemId=@Model.ItemId';
        like.className = "bi bi-heart";
    }

    function func(data) {
        if (data.isCurrentUserLikedItem) {
            userAddedLikeToItem();
        } else {
            userRemovedLikeFromItem();
        }
        likesNumber.innerHTML = data.likesNumber;
    }
</script>

